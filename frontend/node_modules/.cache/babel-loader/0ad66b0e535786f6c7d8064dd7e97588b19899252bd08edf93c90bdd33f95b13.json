{"ast":null,"code":"// Database seeding utility for the Headz application\nimport { supabase } from '../lib/supabase';\nimport { generateSampleHairstyles, sampleCategories } from './imageUtils';\n\n// Seed categories\nexport const seedCategories = async () => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('hairstyle_categories').upsert(sampleCategories, {\n      onConflict: 'name'\n    }).select();\n    if (error) throw error;\n    console.log('Categories seeded successfully:', data);\n    return data;\n  } catch (error) {\n    console.error('Error seeding categories:', error);\n    throw error;\n  }\n};\n\n// Seed hairstyles\nexport const seedHairstyles = async () => {\n  try {\n    // First get categories to map them correctly\n    const {\n      data: categories\n    } = await supabase.from('hairstyle_categories').select('id, name');\n    if (!categories) throw new Error('No categories found');\n    const categoryMap = categories.reduce((acc, cat) => {\n      acc[cat.name] = cat.id;\n      return acc;\n    }, {});\n    const sampleHairstyles = generateSampleHairstyles();\n\n    // Map hairstyles to category IDs\n    const hairstylesWithCategories = sampleHairstyles.map(style => ({\n      ...style,\n      category_id: categoryMap[style.category === 'mens' ? 'Men\\'s Cuts' : style.category === 'womens' ? 'Women\\'s Styles' : 'Unisex Options']\n    }));\n    const {\n      data,\n      error\n    } = await supabase.from('hairstyles').upsert(hairstylesWithCategories, {\n      onConflict: 'name'\n    }).select();\n    if (error) throw error;\n    console.log('Hairstyles seeded successfully:', data);\n    return data;\n  } catch (error) {\n    console.error('Error seeding hairstyles:', error);\n    throw error;\n  }\n};\n\n// Seed all data\nexport const seedAllData = async () => {\n  try {\n    console.log('Starting database seeding...');\n    await seedCategories();\n    await seedHairstyles();\n    console.log('Database seeding completed successfully!');\n  } catch (error) {\n    console.error('Database seeding failed:', error);\n    throw error;\n  }\n};\n\n// Clear all data (for testing)\nexport const clearAllData = async () => {\n  try {\n    console.log('Clearing all data...');\n    const {\n      error: hairstylesError\n    } = await supabase.from('hairstyles').delete().neq('id', '00000000-0000-0000-0000-000000000000'); // Delete all except dummy\n\n    const {\n      error: categoriesError\n    } = await supabase.from('hairstyle_categories').delete().neq('id', '00000000-0000-0000-0000-000000000000'); // Delete all except dummy\n\n    if (hairstylesError) throw hairstylesError;\n    if (categoriesError) throw categoriesError;\n    console.log('All data cleared successfully!');\n  } catch (error) {\n    console.error('Error clearing data:', error);\n    throw error;\n  }\n};\n\n// Check if data exists\nexport const checkDataExists = async () => {\n  try {\n    const {\n      data: categories\n    } = await supabase.from('hairstyle_categories').select('count').limit(1);\n    const {\n      data: hairstyles\n    } = await supabase.from('hairstyles').select('count').limit(1);\n    return {\n      hasCategories: categories && categories.length > 0,\n      hasHairstyles: hairstyles && hairstyles.length > 0\n    };\n  } catch (error) {\n    console.error('Error checking data:', error);\n    return {\n      hasCategories: false,\n      hasHairstyles: false\n    };\n  }\n};\n\n// Auto-seed if no data exists\nexport const autoSeedIfEmpty = async () => {\n  try {\n    const {\n      hasCategories,\n      hasHairstyles\n    } = await checkDataExists();\n    if (!hasCategories || !hasHairstyles) {\n      console.log('Database appears empty, seeding sample data...');\n      await seedAllData();\n      return true;\n    }\n    console.log('Database already has data, skipping seeding.');\n    return false;\n  } catch (error) {\n    console.error('Error in auto-seeding:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["supabase","generateSampleHairstyles","sampleCategories","seedCategories","data","error","from","upsert","onConflict","select","console","log","seedHairstyles","categories","Error","categoryMap","reduce","acc","cat","name","id","sampleHairstyles","hairstylesWithCategories","map","style","category_id","category","seedAllData","clearAllData","hairstylesError","delete","neq","categoriesError","checkDataExists","limit","hairstyles","hasCategories","length","hasHairstyles","autoSeedIfEmpty"],"sources":["/Users/apple/Downloads/headz-main/frontend/src/utils/seedData.ts"],"sourcesContent":["// Database seeding utility for the Headz application\nimport { supabase } from '../lib/supabase';\nimport { generateSampleHairstyles, sampleCategories } from './imageUtils';\n\n// Seed categories\nexport const seedCategories = async () => {\n  try {\n    const { data, error } = await supabase\n      .from('hairstyle_categories')\n      .upsert(sampleCategories, { onConflict: 'name' })\n      .select();\n\n    if (error) throw error;\n    console.log('Categories seeded successfully:', data);\n    return data;\n  } catch (error) {\n    console.error('Error seeding categories:', error);\n    throw error;\n  }\n};\n\n// Seed hairstyles\nexport const seedHairstyles = async () => {\n  try {\n    // First get categories to map them correctly\n    const { data: categories } = await supabase\n      .from('hairstyle_categories')\n      .select('id, name');\n\n    if (!categories) throw new Error('No categories found');\n\n    const categoryMap = categories.reduce((acc, cat) => {\n      acc[cat.name] = cat.id;\n      return acc;\n    }, {} as Record<string, string>);\n\n    const sampleHairstyles = generateSampleHairstyles();\n    \n    // Map hairstyles to category IDs\n    const hairstylesWithCategories = sampleHairstyles.map(style => ({\n      ...style,\n      category_id: categoryMap[style.category === 'mens' ? 'Men\\'s Cuts' : \n                              style.category === 'womens' ? 'Women\\'s Styles' : \n                              'Unisex Options']\n    }));\n\n    const { data, error } = await supabase\n      .from('hairstyles')\n      .upsert(hairstylesWithCategories, { onConflict: 'name' })\n      .select();\n\n    if (error) throw error;\n    console.log('Hairstyles seeded successfully:', data);\n    return data;\n  } catch (error) {\n    console.error('Error seeding hairstyles:', error);\n    throw error;\n  }\n};\n\n// Seed all data\nexport const seedAllData = async () => {\n  try {\n    console.log('Starting database seeding...');\n    \n    await seedCategories();\n    await seedHairstyles();\n    \n    console.log('Database seeding completed successfully!');\n  } catch (error) {\n    console.error('Database seeding failed:', error);\n    throw error;\n  }\n};\n\n// Clear all data (for testing)\nexport const clearAllData = async () => {\n  try {\n    console.log('Clearing all data...');\n    \n    const { error: hairstylesError } = await supabase\n      .from('hairstyles')\n      .delete()\n      .neq('id', '00000000-0000-0000-0000-000000000000'); // Delete all except dummy\n\n    const { error: categoriesError } = await supabase\n      .from('hairstyle_categories')\n      .delete()\n      .neq('id', '00000000-0000-0000-0000-000000000000'); // Delete all except dummy\n\n    if (hairstylesError) throw hairstylesError;\n    if (categoriesError) throw categoriesError;\n    \n    console.log('All data cleared successfully!');\n  } catch (error) {\n    console.error('Error clearing data:', error);\n    throw error;\n  }\n};\n\n// Check if data exists\nexport const checkDataExists = async () => {\n  try {\n    const { data: categories } = await supabase\n      .from('hairstyle_categories')\n      .select('count')\n      .limit(1);\n\n    const { data: hairstyles } = await supabase\n      .from('hairstyles')\n      .select('count')\n      .limit(1);\n\n    return {\n      hasCategories: categories && categories.length > 0,\n      hasHairstyles: hairstyles && hairstyles.length > 0\n    };\n  } catch (error) {\n    console.error('Error checking data:', error);\n    return { hasCategories: false, hasHairstyles: false };\n  }\n};\n\n// Auto-seed if no data exists\nexport const autoSeedIfEmpty = async () => {\n  try {\n    const { hasCategories, hasHairstyles } = await checkDataExists();\n    \n    if (!hasCategories || !hasHairstyles) {\n      console.log('Database appears empty, seeding sample data...');\n      await seedAllData();\n      return true;\n    }\n    \n    console.log('Database already has data, skipping seeding.');\n    return false;\n  } catch (error) {\n    console.error('Error in auto-seeding:', error);\n    return false;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}